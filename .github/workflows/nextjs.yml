# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Samsul Islam Portfolio site

on:
    # Runs on pushes targeting the default branch
    push:
        branches: ['master']

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    # Build job
    build:
        runs-on: ubuntu-latest
        steps:
            # Step to checkout the repository
            - name: Checkout
              uses: actions/checkout@v4

            # Detect package manager (npm or yarn)
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi

            # Set up Node.js environment
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}

            # Set up GitHub Pages configuration (Next.js static site generator)
            - name: Setup Pages
              uses: actions/configure-pages@v5
              with:
                  static_site_generator: next

            # Restore cache for dependencies
            - name: Restore cache
              uses: actions/cache@v4
              with:
                  path: |
                      .next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

            # Install dependencies (npm or yarn)
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

            # Step to inject environment variables dynamically
            - name: Set environment variables dynamically
              run: |
                  # Create and assign all necessary secrets dynamically as environment variables
                  for SECRET_NAME in $(printenv | grep -oP 'NEXT_PUBLIC_\S+' | sort | uniq); do
                      echo "Setting environment variable $SECRET_NAME"
                      echo "$SECRET_NAME=${{ secrets[$SECRET_NAME] }}" >> $GITHUB_ENV
                  done
                  # Optional: Displaying the current environment variables for debugging purposes (removes sensitive data from logs)
                  echo "Environment variables injected"

            # Build the Next.js app with the injected environment variables
            - name: Build with Next.js
              run: ${{ steps.detect-package-manager.outputs.runner }} next build

            # Upload the build artifact to be deployed on GitHub Pages
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./out

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            # Step to deploy to GitHub Pages
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
